-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addDefs(state, defs){
  case defs of
    {} -> state |
    Var(x) : dfs -> addNames(addDefs(state, dfs), x) |
    Fun(name, args, body) : dfs -> addFunction(addDefs(state, dfs), name, args, body)
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  case expr of
      Scope (defs, expr) ->   case enterScope(s) of
                                s ->  case addDefs(s, defs) of
                                        s ->  case eval([s, w], expr) of
                                                [[s, w], value] -> [[leaveScope(s), w], value]
                                              esac
                                      esac
                              esac
    | Assn (ref, value) ->  case evalList(c, {ref, value}) of
                              [c@[s, w], {Ref(x), v}] -> [[s <- [x, Var(v)], w], v]
                            esac
    | Seq  (s1, s2)     ->  case eval (c, s1) of
                              [c, _] -> eval (c, s2)
                            esac
    | Skip              ->  [c, 0]
    | Read (ref)        ->  case eval (c, ref) of
                              [[s, w], Ref(x)] -> 
                                case readWorld (w) of
                                  [v, w] -> [[s <- [x, Var(v)], w], 0]
                                esac
                            esac
    | Write (e)         ->  case eval (c, e) of
                              [[s, w], v] -> [[s, writeWorld (v, w)], 0]
                            esac
    | If (e, s1, s2)    ->  case eval (c, e) of
                                [c, 0] -> eval (c, s2)
                              | [c, _] -> eval (c, s1)
                            esac
    | While (e, body)   ->  case eval (c, e) of
                                [c, 0] -> [c, 0]
                              | [c, _] -> eval (c, Seq (body, While(e, body)))
                            esac
    | DoWhile (body, e) ->  eval (c, Seq(body, While(e, body)))
    | Var (x)           ->  case lookup(s, x) of
                              Var(x) -> [c, x]
                            esac
    | Ref (x)           ->  [c, Ref (x)]
    | Const (n)         ->  [c, n]
    | Binop (op, l, r)  ->  case eval (c, l) of
                              [c, l] -> case eval (c, r) of
                                          [c, r] -> [c, evalOp(op, l, r)]
                                        esac
                            esac
    | Ignore (e)        ->  case eval (c, e) of
                              [c, _] -> [c, 0]
                            esac
    | Call (f, argsL)    ->  case lookup(s, f) of
                              Fun(args, body) ->  case evalList(c, argsL) of
                                                    [c@[s, w], vals] -> case enterFunction(s) of
                                                                          st -> case foldl(fun(s, [name, value]) {addName(s, name, Var(value))}, st, zip(args, vals)) of
                                                                                  stFun -> case eval([stFun, w], body) of
                                                                                          [[stFun, w], value] -> [[leaveFunction(s, getGlobal(stFun)), w], value]
                                                                                        esac
                                                                                esac
                                                                        esac
                                                  esac
                            esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}