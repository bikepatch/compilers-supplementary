-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr ({
        [Left, {[s("!!"), fun(l, op, r) {Binop(op, Binop("!=", l, Const(0)), Binop("!=", r, Const(0)))}]}],
        [Left, {[s("&&"), fun(l, op, r) {Binop(op, Binop("!=", l, Const(0)), Binop("!=", r, Const(0)))}]}],
        [Nona, {[s("=="), fun(l, op, r) {Binop(op, l, r)}],
                [s("!="), fun(l, op, r) {Binop(op, l, r)}],
                [s("<"), fun(l, op, r) {Binop(op, l, r)}],
                [s("<="), fun(l, op, r) {Binop(op, l, r)}],
                [s(">"), fun(l, op, r) {Binop(op, l, r)}],
                [s(">="), fun(l, op, r) {Binop(op, l, r)}]}],
        [Left, {[s("+"), fun(l, op, r) {Binop(op, l, r)}],
                [s("-"), fun(l, op, r) {Binop(op, l, r)}]}],
        [Left, {[s("*"), fun(l, op, r) {Binop(op, l, r)}],
                [s("/"), fun(l, op, r) {Binop(op, l, r)}],
                [s("%"), fun(l, op, r) {Binop(op, l, r)}]}]
      }, primary);

var afterIf = memo $ eta syntax (
    kFi {Skip}
  | kElse x=stmt kFi {x}
  | kElif x=exp kThen y=stmt z=afterIf {If(x, y, z)}
);

var simpleStmt = memo $ eta syntax (
    kRead x=inbr[s("("), lident, s(")")] {Read(x)}
  | kWrite x=inbr[s("("), exp, s(")")]   {Write(x)}
  | kSkip                                {Skip}
  | x=lident s[":="] y=exp               {Assn(x, y)}
  | kIf x=exp kThen y=stmt z=afterIf {If(x, y, z)}
  | kWhile x=exp kDo y=stmt kOd {While(x, y)}
  | kDo x=stmt kWhile y=exp kOd {DoWhile(x, y)}
  | kFor x=simpleStmt s[","] y=exp s[","] z=simpleStmt kDo s=stmt kOd {Seq(x, While(y, Seq(s, z)))}
);

var stmt = memo $ eta syntax(
    stmt1=simpleStmt s[";"] stmt2=stmt {Seq(stmt1, stmt2)}
  | simpleStmt
);
   

-- Public top-level parser
public parse = stmt;
             
