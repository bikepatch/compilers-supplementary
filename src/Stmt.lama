-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[state, world], stmt) {
  case stmt of
    Assn   (x, expr)   -> [state <- [x, evalExpr (state, expr)], world]
  | Seq    (s1, s2)    -> eval (eval (c, s1), s2)
  | Skip               -> c                 
  | Read   (x)         -> case readWorld (world) of
                            [n, world_] -> [state <- [x, n], world_]
                          esac          
  | Write  (expr)      -> [state, writeWorld (evalExpr (state, expr), world)]
  | If  (expr, s1, s2) -> if evalExpr(state, expr) != 0 then
                            eval(c, s1)
                          else
                            eval(c, s2)
                          fi
  | While (expr, st)   -> if evalExpr(state, expr) != 0 then
                            eval(c, Seq(st, While(expr, st)))
                          else
                            c
                          fi
  | DoWhile (st, expr) -> eval(c, Seq(st, While(expr, st)))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
